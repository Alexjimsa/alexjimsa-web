---
import { getCollection } from 'astro:content';
import { getRelativeLocaleUrl } from 'astro:i18n';

interface Props { class?: string; navLabel?: string }
const { class: className = '', navLabel = 'Language selector' } = Astro.props;

const path = Astro.url.pathname;
const current = Astro.currentLocale as 'es' | 'en';
const other = current === 'es' ? 'en' : 'es';

const SECTIONS = ['', 'about', 'blog', 'projects'] as const;
const bare = path.replace(/^\/en(\/|$)/, '/');

const getSection = (p: string): (typeof SECTIONS)[number] => {
  for (const s of SECTIONS) {
    const asPath = s === '' ? '/' : `/${s}`;
    if (p === asPath || p.startsWith(asPath + '/')) return s;
  }
  if (p.startsWith('/blog/')) return 'blog';
  if (p.startsWith('/projects/')) return 'projects';
  return '';
};

const section = getSection(bare);

// defaults: listado por idioma
let esHref = getRelativeLocaleUrl('es', section ? `/${section}` : '');
let enHref = getRelativeLocaleUrl('en', section ? `/${section}` : '');

// detalle BLOG → buscar “hermano”
if (section === 'blog' && /^\/blog\/[^/]+\/?$/.test(bare)) {
  const slug = bare.split('/').pop();
  const entries = await getCollection('blog'); // ya validado por schema
  const currentEntry = entries.find(e => e.data.lang === current && e.data.slug === slug);
  if (currentEntry) {
    const sibling = entries.find(e => e.data.translationKey === currentEntry.data.translationKey && e.data.lang === other);
    if (sibling) {
      if (current === 'es') enHref = getRelativeLocaleUrl('en', `blog/${sibling.data.slug}`);
      else esHref = getRelativeLocaleUrl('es', `blog/${sibling.data.slug}`);
    }
  }
}

// detalle PROJECT → buscar “hermano”
if (section === 'projects' && /^\/projects\/[^/]+\/?$/.test(bare)) {
  const slug = bare.split('/').pop();
  const entries = await getCollection('projects');
  const currentEntry = entries.find(e => e.data.lang === current && e.data.slug === slug && (e.data.published ?? true));
  if (currentEntry) {
    const sibling = entries.find(e => e.data.translationKey === currentEntry.data.translationKey && e.data.lang === other && (e.data.published ?? true));
    if (sibling) {
      if (current === 'es') enHref = getRelativeLocaleUrl('en', `projects/${sibling.data.slug}`);
      else esHref = getRelativeLocaleUrl('es', `projects/${sibling.data.slug}`);
    }
  }
}
---


<nav aria-label={navLabel} class={className}>
  <a href={esHref} hreflang="es" rel="alternate" aria-current={current === 'es' ? 'page' : undefined}>ES</a>
  <span aria-hidden="true">|</span>
  <a href={enHref} hreflang="en" rel="alternate" aria-current={current === 'en' ? 'page' : undefined}>EN</a>
</nav>

<style>
  nav { display:inline-flex; align-items:center; gap:.5rem; }
  nav a { text-decoration:none; color: var(--color-text_muted); }
  nav a[aria-current="page"] { font-weight:700; color:var(--color-text); text-decoration: underline; text-underline-offset:.2em; }
  nav a:hover, nav a:focus { color: var(--color-text); }
</style>
